name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # リリースノート生成
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # 前回のタグから今回のタグまでのコミットを取得
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$COMMITS" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body: |
          ## Changes in this Release
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Docker Images
          
          - Frontend: `ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}`
          - Backend: `ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}`
          
          ## Deployment
          
          This release has been automatically built and pushed to the container registry.
        draft: false
        prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

  # 本番用Dockerイメージビルド
  build-production-images:
    runs-on: ubuntu-latest
    needs: create-release
    
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}

    - name: Build and push production Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.service }}
        file: ./${{ matrix.service }}/Dockerfile.prod
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 本番デプロイ
  deploy-production:
    runs-on: ubuntu-latest
    needs: [create-release, build-production-images]
    environment: production
    
    steps:
    - name: Deploy to Production
      run: |
        echo "Production deployment for release ${{ github.ref_name }}"
        echo "This would typically include:"
        echo "- Updating Kubernetes manifests"
        echo "- Rolling deployment"
        echo "- Health checks"
        echo "- Database migrations if needed"
        echo "- Smoke tests"

    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Successfully deployed ${{ github.ref_name }} to production"

    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Failed to deploy ${{ github.ref_name }} to production"