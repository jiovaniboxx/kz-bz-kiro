name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # コードの品質チェック
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Install frontend dependencies
      run: cd frontend && npm ci

    - name: Install backend dependencies
      run: cd backend && uv sync --group dev

    - name: Check frontend formatting
      run: cd frontend && npm run format:check

    - name: Check backend formatting
      run: cd backend && uv run ruff format --check .

    - name: Run frontend linting
      run: cd frontend && npm run lint

    - name: Run backend linting
      run: cd backend && uv run ruff check .

    - name: Check for merge conflicts
      run: |
        if git grep -l "<<<<<<< HEAD" -- '*.ts' '*.tsx' '*.js' '*.jsx' '*.py' '*.md' || \
           git grep -l "=======" -- '*.ts' '*.tsx' '*.js' '*.jsx' '*.py' '*.md' || \
           git grep -l ">>>>>>> " -- '*.ts' '*.tsx' '*.js' '*.jsx' '*.py' '*.md'; then
          echo "Merge conflict markers found!"
          exit 1
        fi

  # 依存関係の脆弱性チェック
  dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v2

    - name: Check frontend dependencies
      run: cd frontend && npm audit --audit-level=high

    - name: Check backend dependencies
      run: cd backend && uv sync --group dev && uv run safety check

  # PRサイズチェック
  pr-size-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check PR size
      run: |
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | wc -l)
        CHANGED_LINES=$(git diff --stat origin/main...HEAD | tail -1 | grep -o '[0-9]\+ insertions\|[0-9]\+ deletions' | grep -o '[0-9]\+' | paste -sd+ | bc || echo 0)
        
        echo "Changed files: $CHANGED_FILES"
        echo "Changed lines: $CHANGED_LINES"
        
        if [ "$CHANGED_FILES" -gt 50 ]; then
          echo "::warning::This PR changes $CHANGED_FILES files. Consider breaking it into smaller PRs."
        fi
        
        if [ "$CHANGED_LINES" -gt 1000 ]; then
          echo "::warning::This PR changes $CHANGED_LINES lines. Consider breaking it into smaller PRs."
        fi

  # コメント自動生成
  pr-comment:
    runs-on: ubuntu-latest
    needs: [code-quality, dependency-check]
    if: always()
    
    steps:
    - name: Comment PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: checks } = await github.rest.checks.listForRef({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha
          });
          
          const failedChecks = checks.check_runs.filter(check => check.conclusion === 'failure');
          
          if (failedChecks.length > 0) {
            const comment = `## ❌ PR Checks Failed
            
            The following checks failed:
            ${failedChecks.map(check => `- ${check.name}`).join('\n')}
            
            Please fix the issues and push again.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } else {
            const comment = `## ✅ All PR Checks Passed
            
            Great job! All automated checks are passing.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }